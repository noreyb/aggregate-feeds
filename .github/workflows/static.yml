# Simple workflow for deploying static content to GitHub Pages
name: Update

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  schedule:
    - cron: "30 */6 * * *"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
#  update_nitter:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-python@v4
#        with:
#          python-version: "3.11"
#      - uses: Gr1N/setup-poetry@v8
#      - run: poetry install --no-root
#      - run: RAINDROP_TOKEN=${{secrets.RAINDROP_TOKEN}} RAINDROP_NITTER=${{secrets.RAINDROP_NITTER}} poetry run python main.py nitter
#      - name: Update feed
#        continue-on-error: true
#        run: |
#          git config user.name "$(git --no-pager log --format=format:'%an' -n 1)"
#          git config user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
#          git fetch origin main
#          git merge origin/main
#          git add ./output/nitter.xml
#          git commit -m "update nitter feed"
#          git push origin main

  update_cmc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: Gr1N/setup-poetry@v9
      - run: poetry install --no-root
      - run: RAINDROP_TOKEN=${{secrets.RAINDROP_TOKEN}} RAINDROP_COMIC=${{secrets.RAINDROP_COMIC}} poetry run python main.py comic
      - name: Update feed
        continue-on-error: true
        run: |
          git config user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
          git fetch origin main
          git merge origin/main
          git add ./output/comic.xml
          git commit -m "update comic feed"
          git push origin main

  update_fdv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: Gr1N/setup-poetry@v9
      - run: poetry install --no-root
      - run: RAINDROP_TOKEN=${{secrets.RAINDROP_TOKEN}} RAINDROP_FEDIVERSE=${{secrets.RAINDROP_FEDIVERSE}} poetry run python main.py fediverse
      - name: Update feed
        continue-on-error: true
        run: |
          git config user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
          git fetch origin main
          git merge origin/main
          git add ./output/fediverse.xml
          git commit -m "update fediverse feed"
          git push origin main

 update_booru:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - uses: actions/setup-python@v5
       with:
         python-version: "3.11"
     - uses: Gr1N/setup-poetry@v9
     - run: poetry install --no-root
     - run: BOORU_BASE_URL=${{secrets.BOORU_BASE_URL}} BOORU_ENDPOINT=${{secrets.BOORU_ENDPOINT}} poetry run python main.py booru
     - name: Update feed
       continue-on-error: true
       run: |
         git config user.name "$(git --no-pager log --format=format:'%an' -n 1)"
         git config user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
         git fetch origin main
         git merge origin/main
         git add ./output/booru.xml
         git commit -m "update booru feeds"
         git push origin main
    
  update_kmn:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: Gr1N/setup-poetry@v9
      - run: poetry install --no-root
      - run: KEMONO_BASE_URL=${{secrets.KEMONO_BASE_URL}} KEMONO_ENDPOINT=${{secrets.KEMONO_ENDPOINT}} poetry run python main.py kemono
      - name: Update feed
        continue-on-error: true
        run: |
          git config user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
          git fetch origin main
          git merge origin/main
          git add ./output/kemono.xml
          git commit -m "update kemono feeds"
          git push origin main

  update_twt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: Gr1N/setup-poetry@v9
      - run: poetry install --no-root
      - run: poetry run playwright install --with-deps
      - run: DBX_ACCESS_TOKEN=${{ secrets.DBX_ACCESS_TOKEN }} GMAIL_CREDS_PATH=${{ secrets.GMAIL_CREDS_PATH }} GMAIL_TOKEN_PATH=${{ secrets.GMAIL_TOKEN_PATH }} RAINDROP_TOKEN=${{secrets.RAINDROP_TOKEN}} RAINDROP_TWITTER=${{secrets.RAINDROP_TWITTER}} TWITTER_EMAIL=${{secrets.TWITTER_EMAIL}} TWITTER_ID=${{secrets.TWITTER_ID}} TWITTER_PASSWORD=${{secrets.TWITTER_PASSWORD}} poetry run python main.py twitter
      - name: Update feed
        continue-on-error: true
        run: |
          git config user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
          git fetch origin main
          git merge origin/main
          git add ./output/twitter.xml
          git commit -m "update twitter feed"
          git push origin main


  deploy:
    if: ${{ always() }}
    needs: [update_cmc, update_fdv, update_kmn, update_twt]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: './output'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
